@inject IJSRuntime jsRuntime
@implements IDisposable
@using Microsoft.Extensions.Configuration
@using Grpc.Net.Client;
@inject IConfiguration config
@inject SessionService sessionService
@inject Greeter.GreeterClient greeter

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof( MainLayout )">
                <NotAuthorized>
                    <h1>Bejelentkezés szükséges</h1>
                    <p>Jelentkezz be a menü eléréséhez!</p>
                    <button onclick="window.location.href='/'">Bejelentkezés</button>
                </NotAuthorized>
                <Authorizing>
                    <h1>Authentication in progress</h1>
                    <p>Only visible while authentication is in progress.</p>
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Itt nincs semmi</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {


    protected override async void OnInitialized( )
    {
        string serverGuid = null;
        string loginTime = null;

        if ( config[ $"CustomOptions:AuthenticationType" ] == "windows" )
        {
            serverGuid = Guid.NewGuid( ).ToString( );
            loginTime = DateTime.Now.ToString( "yyyyMMddTHHmmssfff" );
        }

        var res = await jsRuntime.InvokeAsync<string>( "AppInit", serverGuid, loginTime );


        //var reply = await greeter.SayHelloAsync( new HelloRequest { Name = "GreeterClient" } );
        //var reply2 = await greeter.TestFunctionAsync( new TestRequest { 
        //    Parameter1 = "param1", Parameter2 = "param2" } );

        base.OnInitialized( );
    }

    protected override async Task OnAfterRenderAsync( bool first )
    {

    }

    public void Dispose( )
    {
    }


}
